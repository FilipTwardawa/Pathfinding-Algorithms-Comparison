"""
Tests for the core graph processing module.

This script contains an asynchronous test function that validates the
path reconstruction functionality of the `PathReconstructor` class.
The test ensures proper integration and functionality of the following components:
- `GraphProcessor`
- `PathReconstructor`
- `GraphVisualizer`
- `GraphStyler`

Dependencies:
    - pytest
    - core.GraphProcessor, core.PathReconstructor, core.GraphVisualizer, core.GraphStyler
    - utils.initialize_graph
"""
import pytest
from core import GraphProcessor, PathReconstructor, GraphVisualizer, GraphStyler
from utils import initialize_graph


@pytest.mark.asyncio
async def test_path_reconstruction():
    """
    Tests the reconstruction of a path in a graph and its visualization.

    This test initializes a graph, sets up a start and end node, and validates that the
    `PathReconstructor` can successfully reconstruct and visualize a path between these nodes.
    It ensures that the path visualization generates frames.

    Steps:
        1. Initialize the graph using `initialize_graph`.
        2. Create a `GraphVisualizer`, `GraphStyler`, and `PathReconstructor` instance.
        3. Define a start and end node.
        4. Add edges between nodes and initialize them using `GraphProcessor`.
        5. Reconstruct the path asynchronously and verify that visualization frames are generated.

    Assertions:
        - Ensures at least one frame is generated by the `GraphVisualizer`.

    Raises:
        AssertionError: If no visualization frames are generated.

    Example:
        >>> pytest.main(["-k", "test_path_reconstruction"])
    """
    graph = initialize_graph("Gliwice, Poland")
    visualizer = GraphVisualizer(graph)
    styler = GraphStyler()
    reconstructor = PathReconstructor(graph, visualizer, styler)

    start_node, end_node = list(graph.nodes)[:2]
    graph.nodes[end_node]["previous"] = start_node

    graph.add_edge(start_node, end_node, key=0, weight=1)

    GraphProcessor.initialize_edges(graph, styler)

    await reconstructor.reconstruct_path(start_node, end_node, plot=True)
    assert len(
        visualizer.frames) > 0, "Path visualization not generated"
